// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
  triedCombinations TriedCombination[]
  ratings           Rating[]
  accounts      Account[]
  sessions      Session[]


  @@index([email])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model TriedCombination {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId        String
  combinationId String
  combination Combination @relation(fields: [combinationId], references: [id])

  @@index([userId])
  @@index([combinationId])
}

model Chip {
  id           String        @id @default(uuid())
  name         String
  imgUrl       String
  flavor       String
  combinations Combination[]
}

model Dip {
  id           String        @id @default(uuid())
  name         String
  imgUrl       String
  flavor       String
  combinations Combination[]
}

model Rating {
  id            String      @id @default(uuid())
  rating        Float
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  combinationId String
  combination   Combination @relation(fields: [combinationId], references: [id])

  @@index([userId])
  @@index([combinationId])
}

model Combination {
  id               String             @id @default(uuid())
  comboNr          String             @unique
  name             String
  chipId           String
  chip             Chip               @relation(fields: [chipId], references: [id])
  dipId            String
  dip              Dip                @relation(fields: [dipId], references: [id])
  rating           Float
  ratings          Rating[]
  TriedCombination TriedCombination[]

  @@index([chipId])
  @@index([dipId])
}
